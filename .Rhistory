usethis::use_data_raw()
source("~/Desktop/project2/hex/data-raw/DATASET.R")
source("~/Desktop/project2/hex/data-raw/DATASET.R")
source("~/Desktop/project2/hex/data-raw/DATASET.R")
usethis::use_r("mouse")
source("~/Desktop/project2/hex/R/mouse.R")
#' \describe{
#'   \item{ID}{a factor denoting mouse sex and identification number}
#'   \item{island}{a factor denoting island in Palmer Archipelago, Antarctica (Biscoe, Dream or Torgersen)}
#'   \item{Body Weight {i}}{a float denoting the mouse's body weight at checkpoint {i}}
#'   \item{Date Body Weight {i}}{The date on which the body weight was recorded at checkpoint {i}}
#'   \item{Outcome {i}}{a float denoting the mouse's outcome value at checkpoint {i}}
#'   \item{Date Outcome {i}}{The date on which the outcome was recorded at checkpoint {i}}
#'   \item{sex}{a factor denoting mouse sex (female, male)}
#' }
#' @source {Stat 108 Professor James Xenakis https://canvas.harvard.edu/courses/140628/files/folder/Projects?}
"mouse"
devtools::document()
install.packages("devtools")
library(devtools)
devtools::document()
devtools::document()
devtools::document()
usethis::use_r("bodyweight_data")
devtools::document()
usethis::use_r("outcome_data")
devtools::document()
devtools::document()
usethis::use_r("find_gender_mismatches")
#' Find Gender Mismatch
#'
#'This function identifies gender mismatches between `birth_data` and `bodyweight_data`.
#'
#' @param birth_data A dataframe that contains sex, treatment, and id info
#' @param bodyweight_data A dataframe that tracks bodyweight changes for each mouse over time
#'
#' @return A tibble containing rows where `Sex` does not match `Sex_inferred`.
#' @export
find_gender_mismatches <- function(birth_data, bodyweight_data) {
gender_mismatch <- dplyr::inner_join(birth_data, bodyweight_data, by = "ID") %>%
dplyr::filter(Sex != Sex_inferred)
# Print the mismatches
print("Gender Mismatches:")
print(gender_mismatch)
# Return the mismatch data
return(gender_mismatch)
}
roxygen2::roxygenize()
?find_gender_mismatches
roxygen2::roxygenize()
rm(list = c("find_gender_mismatches"))
devtools::load_all()
gender_mismatch <- find_gender_mismatches(birth_data, bodyweight_data)
rm(list = c("find_gender_mismatches"))
devtools::load_all()
gender_mismatch <- find_gender_mismatches(birth_data, bodyweight_data)
print(gender_mismatch)
roxygen2::roxygenize()
roxygen2::roxygenize()
?find_gender_mismatches
library(readxl)
library(dplyr)
library(tidyr)
library(stringr)
library(ggplot2)
library(pwr)
library(nlme)
# Load the dataset
birth_data <- read_excel("mousedata.xlsx", sheet = "Birth")
bodyweight_data <- read_excel("mousedata.xlsx", sheet = "Body Weight")
outcome_data <- read_excel("mousedata.xlsx", sheet = "Outcome")
# Fix typos in the Treatment column
birth_data <- birth_data %>%
mutate(Treatment = case_when(
Treatment == "Placobo" ~ "Plac",
Treatment == "Trmt" ~ "Tmt",
TRUE ~ Treatment
))
# Clean Body Weight columns
bodyweight_data <- bodyweight_data %>%
mutate(across(starts_with("Body Weight"), ~ as.numeric(str_replace(.x, "Dead", NA_character_))))
# standardizing names to remove spaces
colnames(bodyweight_data) <- str_replace_all(colnames(bodyweight_data), "\\s+", "_")
# Fixing columns typos
print(colnames(bodyweight_data))
# Extract gender from the ID in bodyweight_data
bodyweight_data <- bodyweight_data %>%
mutate(Sex_inferred = if_else(str_detect(ID, "_F_"), "F", "M"))
# Check for gender mismatches
gender_mismatch <- birth_data %>%
inner_join(bodyweight_data, by = "ID") %>%
filter(Sex != Sex_inferred)
print("Gender Mismatches:")
print(gender_mismatch)
print(colnames(bodyweight_data))
merged_data <- birth_data |>
full_join(bodyweight_data, by = "ID") |>
full_join(outcome_data, by = "ID")
colnames(bodyweight_data) <- str_replace_all(colnames(bodyweight_data), "\\s+", "_")
outcome_data <- outcome_data |>
rename(ID = subject_ID)
colnames(bodyweight_data) <- str_replace_all(colnames(bodyweight_data), "\\s+", "_")
outcome_data <- outcome_data |>
rename(ID = Subject_ID)
# Fixing columns typos
print(colnames(bodyweight_data))
print(colnames(bodyweight_data), quote = FALSE)
bodyweight_data <- bodyweight_data |>
rename(Date_Body_Weight_2...5 = Date_Body_Weight_2)
bodyweight_data <- bodyweight_data |>
rename(Date_Body_Weight_2 = Date_Body_Weight_2...5)
bodyweight_data <- bodyweight_data |>
rename(Date_Body_Weight_3 = Date_Body_Weight_2...7)
print(colnames(bodyweight_data))
bodyweight_data <- bodyweight_data |>
rename(Date_Outcome_1 = Date_Ourcome_1)
outcome_data <- outcome_data |>
rename(Date_Outcome_1 = Date_Ourcome_1)
print(colnames(outcome_data))
colnames(outcome_data) <- str_replace_all(colnames(outcome_data), "\\s+", "_")
outcome_data <- outcome_data |>
rename(Date_Outcome_1 = Date_Ourcome_1)
merged_data <- birth_data |>
full_join(bodyweight_data, by = "ID") |>
full_join(outcome_data, by = "ID")
print(merged_data)
colnames(merged_data)
devtools::document()
source("~/Desktop/project2/hex/data-raw/DATASET.R")
source("~/Desktop/project2/hex/data-raw/DATASET.R")
source("~/Desktop/project2/hex/data-raw/DATASET.R")
source("~/Desktop/project2/hex/data-raw/DATASET.R")
load("~/Desktop/project2/hex/data/merged_data.rda")
load("~/Desktop/project2/hex/data/merged_data.rda")
usethis::use r("merged_data")
usethis::use_r("merged_data")
evtools::document()
devtools::document()
#' Find Gender Mismatch
#'
#'This function identifies gender mismatches between `birth_data` and `bodyweight_data`.
#'
#' @param merged_data A dataframe that contains sex, treatment, bodyweight, and id info
#'
#' @return A tibble containing rows where `Sex` does not match `Sex_inferred`.
#' @export
find_gender_mismatches <- function(merged_data) {
merged_data |>
dplyr::filter(Sex != Sex_inferred)
# Print the mismatches
print("Gender Mismatches:")
print(gender_mismatch)
# Return the mismatch data
return(gender_mismatch)
}
find_gender_mismatches()
find_gender_mismatches(merged_data)
find_gender_mismatches(merged_data)
View(gender_mismatch)
View(merged_data)
View(merged_data)
View(bodyweight_data)
View(merged_data)
usethis::use r("bodyweight_summary")
usethis::use_r("bodyweight_summary")
source("~/Desktop/project2/hex/R/bodyweight_summary.R")
bodyweight_summary(merged_data)
?bodywight_summary
?bodyweight_summary
roxygen2::roxygenize()
rm(list = c("bodyweight_summary", "find_gender_mismatches"))
devtools::load_all()
bodyweight_summary(merged_data)
find_gender_mismatches(birth_data, bodyweight_data)
bodyweight_summary(merged_data)
find_gender_mismatches(birth_data, bodyweight_data)
devtools::load_all()
bodyweight_summary(merged_data)
find_gender_mismatches(birth_data, bodyweight_data)
rm(list = c("bodyweight_summary", "find_gender_mismatches"))
devtools::load_all()
bodyweight_summary(merged_data)
?bodyweight_summary
?bodyweight_summary
devtools::load_all()
?bodyweight_summary
usethis::use_r("stat_summary")
source("~/Desktop/project2/hex/R/stat_summary.R")
# statistical output
summary_data  |>
group_by(Time) %>%
summarise(avg = mean(x), std = sd(x), min = min(x), max = max(x))
# statistical output
summary_data  |>
group_by(Time) |>
summarise(avg = mean(x), std = sd(x), min = min(x), max = max(x))
# statistical output
summary_data  |>
group_by(Time) |>
dplyr::summarise(avg = mean(x), std = sd(x), min = min(x), max = max(x))
# statistical output
summary_data  |>
dplyr::group_by(Time) |>
dplyr::summarise(avg = mean(x), std = sd(x), min = min(x), max = max(x))
# statistical output
merged_data  |>
dplyr::group_by(Time) |>
dplyr::summarise(avg = mean(x), std = sd(x), min = min(x), max = max(x))
source("~/Desktop/project2/hex/R/stat_summary.R")
# reshaping for ANOVA
bodyweight_long <- pivot_longer(merged_data,
cols = starts_with("Body_Weight"),
names_to = "Time",
values_to = "Weight")
# reshaping for ANOVA
bodyweight_long <- tidyr::pivot_longer(merged_data,
cols = starts_with("Body_Weight"),
names_to = "Time",
values_to = "Weight")
source("~/Desktop/project2/hex/R/stat_summary.R")
stat_summary(merged_data)
colnames(merged_data)
devtools::document()
load_all
View(merged_data)
?stat_summary
rm(list = c("stat_summary"))
devtools::load_all()
?stat_summary
source("~/Desktop/project2/hex/R/stat_summary.R")
rm(list = c("stat_summary"))
devtools::document()
stat_summary(merged_data)
stat_summary(merged_data)
devtools::document()
stat_summary(merged_data)
#' Stat_summary
#'
#'This function outputs statistical summaries regarding bodyweight data for the mice.
#'
#' @param merged_data A data frame containing bodyweight data for mice.
#'
#' @return A list containing the statistical summary table, t-test p-value (comparing Bodyweight 1 and 3), and ANOVA p-value (for 3 bodyweights).
#'
#' @export
stat_summary <- function(merged_data) {
t_test <- t.test(merged_data$Body_Weight_1, merged_data$Body_Weight_3, paired = TRUE)
t_test_p_value <- t_test$p.value
# Reshape data for ANOVA
bodyweight_long <- tidyr::pivot_longer(
merged_data,
cols = starts_with("Body_Weight"),
names_to = "Time",
values_to = "Weight"
)
# Create a statistical summary table
summary_table <- bodyweight_long |>
dplyr::group_by(Time) |>
dplyr::summarise(
avg = mean(Weight, na.rm = TRUE),
std = sd(Weight, na.rm = TRUE),
min = min(Weight, na.rm = TRUE),
max = max(Weight, na.rm = TRUE),
.groups = "drop"
)
# Perform ANOVA
anova_result <- aov(Weight ~ Time, data = bodyweight_long)
anova_p_value <- summary(anova_result)[[1]][["Pr(>F)"]][1]
# Printng the t-test and ANOVA p-values
print(paste("T-Test P-Value:", t_test_p_value))
print(paste("ANOVA P-Value:", anova_p_value))
# returning table
return(list(
summary_table = summary_table,
t_test_p_value = t_test_p_value,
anova_p_value = anova_p_value
))
}
rm(list = c("stat_summary"))
devtools::document()
stat_summary(merged_data)
?stat_summary
usethis::use_r("plot")
devtools::document()
plot_mouse_weight(merged_data)
body_weight_log
bodyweight_long <- tidyr::pivot_longer(
merged_data,
cols = starts_with("Body_Weight"),
names_to = "Time",
values_to = "Weight"
)
View(bodyweight_long)
View(bodyweight_long)
View(bodyweight_long)
devtools::document()
plot_mouse_weight(merged_data)
devtools::document()
plot_mouse_weight(merged_data)
devtools::document()
plot_mouse_weight(merged_data)
devtools::document()
plot_mouse_weight(merged_data)
devtools::document()
plot_mouse_weight(merged_data)
devtools::document()
plot_mouse_weight(merged_data)
plot_mouse_weight(merged_data)
devtools::document()
plot_mouse_weight(merged_data)
devtools::document()
plot_mouse_weight(merged_data)
devtools::document()
devtools::document()
plot_mouse_weight(merged_data)
devtools::document()
plot_mouse_weight(merged_data)
devtools::document()
plot_mouse_weight(merged_data)
find_gender_mismatches(merged_data)
find_gender_mismatches(merged_data)
devtools::document()
devtools::document()
devtools::document()
find_gender_mismatches(merged_data)
devtools::document()
find_gender_mismatches(merged_data)
usethis::use_mit_license(name = "Grace")
usethis::use_mit_license()
License: MIT + file LICENSE
devtools::document()
usethis::use author(given="Grace", family="Yoon", rol="cre", email="graceyoon@college.harvard.edu")
usethis::use_author(given="Grace", family="Yoon", rol="cre", email="graceyoon@college.harvard.edu")
usethis::use_author(given="Grace", family="Yoon", email="graceyoon@college.harvard.edu")
usethis::use_author(given="Kaia", family="Li", email="kaiali@college.harvard.edu")
usethis::use_author(given="Kaia", family="Li", email="kaiali@college.harvard.edu")
usethis::use_author(given="SeoYoung", family="Ha", email="seoyoungha@college.harvard.edu")
devtools::check()
usethis::use author(given="Grace", family="Yoon", rol="cre", email="graceyoon@college.harvard.edu")
usethis::use author(given="Grace", family="Yoon", roll="cre", email="graceyoon@college.harvard.edu")
usethis::use author(given="Grace", family="Yoon", rol3="cre", email="graceyoon@college.harvard.edu")
usethis::use author(given="Grace", family="Yoon", role="cre", email="graceyoon@college.harvard.edu")
usethis::use_author(given="Grace", family="Yoon", role="cre", email="graceyoon@college.harvard.edu")
usethis::use_author(given="Grace", family="Yoon", role="cre", email="graceyoon@college.harvard.edu")
devtools::check()
devtools::check()
